<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg width="700" height="450" viewBox="0 0 700 450" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .box { fill: #fff; stroke: #666; stroke-width: 2; rx: 5; }
      .time { fill: #ffebee; stroke: #c62828; }
      .space { fill: #e8f5e9; stroke: #2e7d32; }
      .both { fill: #fff9c4; stroke: #f57f17; }
      .arrow { fill: none; stroke: #999; stroke-width: 2; marker-end: url(#arrowhead); }
      .label { font-family: Arial, sans-serif; font-size: 13px; fill: #333; text-anchor: middle; }
      .title { font-family: Arial, sans-serif; font-size: 18px; font-weight: bold; fill: #1976d2; text-anchor: middle; }
      .code { font-family: "Courier New", monospace; font-size: 11px; fill: #333; }
      .complexity { font-family: "Courier New", monospace; font-size: 12px; font-weight: bold; }
    </style>
    <marker id="arrowhead" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto">
      <polygon points="0 0, 10 3, 0 6" fill="#999"/>
    </marker>
  </defs>
  
  <text x="350" y="25" class="title">Trade-off Tiempo-Espacio: Fibonacci</text>
  
  <!-- Recursive version (slow, low space) -->
  <g id="recursive">
    <rect x="50" y="60" width="250" height="140" class="box time"/>
    <text x="175" y="85" class="label" font-weight="bold" font-size="15">Fibonacci Recursivo</text>
    
    <text x="70" y="110" class="code" text-anchor="start">int fib(int n) {</text>
    <text x="70" y="125" class="code" text-anchor="start">  if (n <= 1) return n;</text>
    <text x="70" y="140" class="code" text-anchor="start">  return fib(n-1) +</text>
    <text x="70" y="155" class="code" text-anchor="start">         fib(n-2);</text>
    <text x="70" y="170" class="code" text-anchor="start">}</text>
    
    <text x="175" y="192" class="complexity" fill="#c62828">Tiempo: O(2ⁿ)</text>
    <text x="175" y="208" class="complexity" fill="#2e7d32">Espacio: O(n)</text>
  </g>
  
  <!-- Arrow -->
  <path d="M 310,130 L 380,130" class="arrow"/>
  <text x="345" y="120" class="label" font-size="11" fill="#f57f17">Usar</text>
  <text x="345" y="135" class="label" font-size="11" fill="#f57f17">memoria</text>
  
  <!-- Memoized version (fast, more space) -->
  <g id="memoized">
    <rect x="390" y="60" width="260" height="140" class="box both"/>
    <text x="520" y="85" class="label" font-weight="bold" font-size="15">Fibonacci Memoizado</text>
    
    <text x="410" y="110" class="code" text-anchor="start">int fib_memo(int n, int m[]) {</text>
    <text x="410" y="125" class="code" text-anchor="start">  if (n <= 1) return n;</text>
    <text x="410" y="140" class="code" text-anchor="start">  if (m[n] != -1) return m[n];</text>
    <text x="410" y="155" class="code" text-anchor="start">  m[n] = fib_memo(n-1, m) +</text>
    <text x="410" y="170" class="code" text-anchor="start">         fib_memo(n-2, m);</text>
    <text x="410" y="185" class="code" text-anchor="start">  return m[n];</text>
    <text x="410" y="200" class="code" text-anchor="start">}</text>
    
    <text x="520" y="220" class="complexity" fill="#c62828">Tiempo: O(n)</text>
    <text x="520" y="236" class="complexity" fill="#2e7d32">Espacio: O(n)</text>
  </g>
  
  <!-- Comparison table -->
  <rect x="50" y="270" width="600" height="150" fill="#f5f5f5" stroke="#999" stroke-width="1.5" rx="5"/>
  <text x="350" y="295" class="title" font-size="15">Comparación de Rendimiento</text>
  
  <!-- Table headers -->
  <text x="120" y="320" class="label" font-weight="bold">n</text>
  <text x="250" y="320" class="label" font-weight="bold">Recursivo</text>
  <text x="450" y="320" class="label" font-weight="bold">Memoizado</text>
  <text x="580" y="320" class="label" font-weight="bold">Mejora</text>
  
  <line x1="70" y1="325" x2="630" y2="325" stroke="#999" stroke-width="1"/>
  
  <!-- Data rows -->
  <text x="120" y="345" class="label">10</text>
  <text x="250" y="345" class="label">177 ops</text>
  <text x="450" y="345" class="label">10 ops</text>
  <text x="580" y="345" class="label" fill="#4caf50">17.7×</text>
  
  <text x="120" y="365" class="label">20</text>
  <text x="250" y="365" class="label">21,891 ops</text>
  <text x="450" y="365" class="label">20 ops</text>
  <text x="580" y="365" class="label" fill="#4caf50">1,094×</text>
  
  <text x="120" y="385" class="label">30</text>
  <text x="250" y="385" class="label">2,692,537 ops</text>
  <text x="450" y="385" class="label">30 ops</text>
  <text x="580" y="385" class="label" fill="#4caf50">89,751×</text>
  
  <text x="120" y="405" class="label">40</text>
  <text x="250" y="405" class="label">~10⁹ ops</text>
  <text x="450" y="405" class="label">40 ops</text>
  <text x="580" y="405" class="label" fill="#4caf50">~10⁷×</text>
  
  <text x="350" y="438" class="label" fill="#666" font-size="11">La memoización transforma O(2ⁿ) en O(n) usando O(n) espacio adicional</text>
</svg>
